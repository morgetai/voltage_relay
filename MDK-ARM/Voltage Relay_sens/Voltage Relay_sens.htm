<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Voltage Relay_sens\Voltage Relay_sens.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Voltage Relay_sens\Voltage Relay_sens.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Nov 26 16:21:34 2018
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EEprom_Write_Data(Flash_Data*, unsigned short) &rArr; Flash_Data::write_data(unsigned short) &rArr; EE_WriteVariable(unsigned short, unsigned short) &rArr; [local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short) &rArr; [local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[cd]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[46]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[36]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">HardFault_Handler</a><BR>
 <LI><a href="#[32]">_MAIN_FUNC()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">_MAIN_FUNC()</a><BR>
 <LI><a href="#[7a]">MyTKeys_OffStateProcess()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7a]">MyTKeys_OffStateProcess()</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[46]">ADC1_COMP_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[58]">CEC_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[43]">DMA1_Channel1_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[44]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[45]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[3f]">EXTI0_1_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[40]">EXTI2_3_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[41]">EXTI4_15_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[3d]">FLASH_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[36]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[51]">I2C1_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[52]">I2C2_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[35]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[3b]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[38]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[3e]">RCC_CRS_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[3c]">RTC_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[34]">Reset_Handler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[53]">SPI1_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[54]">SPI2_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[37]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[39]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f071xb.o(.text)
 <LI><a href="#[4d]">TIM14_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[4e]">TIM15_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[4f]">TIM16_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[50]">TIM17_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[47]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from stm32f0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[48]">TIM1_CC_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[49]">TIM2_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[4a]">TIM3_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[4b]">TIM6_DAC_IRQHandler</a> from stm32f0xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[4c]">TIM7_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[42]">TSC_IRQHandler</a> from stm32f0xx_it.o(i.TSC_IRQHandler) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[55]">USART1_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[56]">USART2_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[57]">USART3_4_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[3a]">WWDG_IRQHandler</a> from startup_stm32f071xb.o(.text) referenced from startup_stm32f071xb.o(RESET)
 <LI><a href="#[32]">_MAIN_FUNC()</a> from main_1.o(i._Z10_MAIN_FUNCv) referenced 2 times from main_1.o(.data)
 <LI><a href="#[7b]">TSL_tkey_Init()</a> from tsl_touchkey.o(i._Z13TSL_tkey_Initv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[33]">Call_Error_Menu()</a> from menu.o(i._Z15Call_Error_Menuv) referenced 2 times from menu.o(.data)
 <LI><a href="#[7c]">TSL_tkey_Process()</a> from tsl_touchkey.o(i._Z16TSL_tkey_Processv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[2d]">EEprom_Write_Data(Flash_Data*, unsigned short)</a> from eeprom_user.o(i._Z17EEprom_Write_DataP10Flash_Datat) referenced 2 times from eeprom_user.o(.data)
 <LI><a href="#[5f]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[7a]">MyTKeys_OffStateProcess()</a> from tsl_user.o(i._Z23MyTKeys_OffStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[78]">MyTKeys_ErrorStateProcess()</a> from tsl_user.o(i._Z25MyTKeys_ErrorStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[71]">TSL_tkey_ProxStateProcess()</a> from tsl_touchkey.o(i._Z25TSL_tkey_ProxStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[77]">TSL_tkey_TouchStateProcess()</a> from tsl_touchkey.o(i._Z26TSL_tkey_TouchStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[75]">TSL_tkey_DetectStateProcess()</a> from tsl_touchkey.o(i._Z27TSL_tkey_DetectStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[72]">TSL_tkey_DebProxStateProcess()</a> from tsl_touchkey.o(i._Z28TSL_tkey_DebProxStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[6d]">TSL_tkey_ReleaseStateProcess()</a> from tsl_touchkey.o(i._Z28TSL_tkey_ReleaseStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[5e]">TSL_tkey_SetStateCalibration(unsigned char)</a> from tsl_touchkey.o(i._Z28TSL_tkey_SetStateCalibrationh) referenced from tsl_ecs.o(i._Z16TSL_ecs_ProcessKP17TSL_ObjectGroup_Tt)
 <LI><a href="#[79]">TSL_tkey_DebErrorStateProcess()</a> from tsl_touchkey.o(i._Z29TSL_tkey_DebErrorStateProcessv) referenced 5 times from tsl_user.o(.constdata)
 <LI><a href="#[76]">TSL_tkey_DebDetectStateProcess()</a> from tsl_touchkey.o(i._Z30TSL_tkey_DebDetectStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[6b]">TSL_tkey_CalibrationStateProcess()</a> from tsl_touchkey.o(i._Z32TSL_tkey_CalibrationStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[74]">TSL_tkey_DebProxTouchStateProcess()</a> from tsl_touchkey.o(i._Z33TSL_tkey_DebProxTouchStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[73]">TSL_tkey_DebProxDetectStateProcess()</a> from tsl_touchkey.o(i._Z34TSL_tkey_DebProxDetectStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[6c]">TSL_tkey_DebCalibrationStateProcess()</a> from tsl_touchkey.o(i._Z35TSL_tkey_DebCalibrationStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[6e]">TSL_tkey_DebReleaseProxStateProcess()</a> from tsl_touchkey.o(i._Z35TSL_tkey_DebReleaseProxStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[70]">TSL_tkey_DebReleaseTouchStateProcess()</a> from tsl_touchkey.o(i._Z36TSL_tkey_DebReleaseTouchStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[6f]">TSL_tkey_DebReleaseDetectStateProcess()</a> from tsl_touchkey.o(i._Z37TSL_tkey_DebReleaseDetectStateProcessv) referenced from tsl_user.o(.constdata)
 <LI><a href="#[14]">num_0()</a> from screen.o(i._Z5num_0v) referenced 2 times from screen.o(.data)
 <LI><a href="#[15]">num_1()</a> from screen.o(i._Z5num_1v) referenced 2 times from screen.o(.data)
 <LI><a href="#[16]">num_2()</a> from screen.o(i._Z5num_2v) referenced 2 times from screen.o(.data)
 <LI><a href="#[17]">num_3()</a> from screen.o(i._Z5num_3v) referenced 2 times from screen.o(.data)
 <LI><a href="#[18]">num_4()</a> from screen.o(i._Z5num_4v) referenced 2 times from screen.o(.data)
 <LI><a href="#[19]">num_5()</a> from screen.o(i._Z5num_5v) referenced 2 times from screen.o(.data)
 <LI><a href="#[1a]">num_6()</a> from screen.o(i._Z5num_6v) referenced 2 times from screen.o(.data)
 <LI><a href="#[1b]">num_7()</a> from screen.o(i._Z5num_7v) referenced 2 times from screen.o(.data)
 <LI><a href="#[1c]">num_8()</a> from screen.o(i._Z5num_8v) referenced 2 times from screen.o(.data)
 <LI><a href="#[1d]">num_9()</a> from screen.o(i._Z5num_9v) referenced 2 times from screen.o(.data)
 <LI><a href="#[13]">point()</a> from screen.o(i._Z5pointv) referenced 2 times from screen.o(.data)
 <LI><a href="#[1e]">letter_A()</a> from screen.o(i._Z8letter_Av) referenced 2 times from screen.o(.data)
 <LI><a href="#[1f]">letter_C()</a> from screen.o(i._Z8letter_Cv) referenced 2 times from screen.o(.data)
 <LI><a href="#[20]">letter_E()</a> from screen.o(i._Z8letter_Ev) referenced 2 times from screen.o(.data)
 <LI><a href="#[21]">letter_L()</a> from screen.o(i._Z8letter_Lv) referenced 2 times from screen.o(.data)
 <LI><a href="#[22]">letter_O()</a> from screen.o(i._Z8letter_Ov) referenced 2 times from screen.o(.data)
 <LI><a href="#[23]">letter_a()</a> from screen.o(i._Z8letter_av) referenced 2 times from screen.o(.data)
 <LI><a href="#[24]">letter_b()</a> from screen.o(i._Z8letter_bv) referenced 2 times from screen.o(.data)
 <LI><a href="#[25]">letter_c()</a> from screen.o(i._Z8letter_cv) referenced 2 times from screen.o(.data)
 <LI><a href="#[26]">letter_d()</a> from screen.o(i._Z8letter_dv) referenced 2 times from screen.o(.data)
 <LI><a href="#[27]">letter_f()</a> from screen.o(i._Z8letter_fv) referenced 2 times from screen.o(.data)
 <LI><a href="#[28]">letter_h()</a> from screen.o(i._Z8letter_hv) referenced 2 times from screen.o(.data)
 <LI><a href="#[29]">letter_n()</a> from screen.o(i._Z8letter_nv) referenced 2 times from screen.o(.data)
 <LI><a href="#[2a]">letter_o()</a> from screen.o(i._Z8letter_ov) referenced 2 times from screen.o(.data)
 <LI><a href="#[2b]">letter_r()</a> from screen.o(i._Z8letter_rv) referenced 2 times from screen.o(.data)
 <LI><a href="#[2c]">letter_t()</a> from screen.o(i._Z8letter_tv) referenced 2 times from screen.o(.data)
 <LI><a href="#[7d]">Menu_Error::action()</a> from menu.o(i._ZN10Menu_Error6actionEv) referenced from menu.o(.constdata__ZTV10Menu_Error)
 <LI><a href="#[7e]">Menu_Error::menu_scr()</a> from menu.o(i._ZN10Menu_Error8menu_scrEv) referenced from menu.o(.constdata__ZTV10Menu_Error)
 <LI><a href="#[6a]">Menu_Error::~Menu_Error()</a> from menu.o(i._ZN10Menu_ErrorD1Ev) referenced from menu.o(.constdata__ZTV10Menu_Error)
 <LI><a href="#[6a]">Menu_Error::~Menu_Error()</a> from menu.o(i._ZN10Menu_ErrorD1Ev) referenced from menu.o(i.__sti___8_menu_cpp_6e0c3973)
 <LI><a href="#[7f]">Event_Check&lang;voltage_relay, void(voltage_relay::*)()&rang;::execute_task()</a> from alarms_events.o(t._ZN11Event_CheckI13voltage_relayMS0_FvvEE12execute_taskEv) referenced from alarms_events.o(.constdata__ZTV11Event_CheckI13voltage_relayMS0_FvvEE)
 <LI><a href="#[60]">Event_Check&lang;voltage_relay, void(voltage_relay::*)()&rang;::~Event_Check()</a> from alarms_events.o(t._ZN11Event_CheckI13voltage_relayMS0_FvvEED1Ev) referenced from alarms_events.o(.constdata__ZTV11Event_CheckI13voltage_relayMS0_FvvEE)
 <LI><a href="#[60]">Event_Check&lang;voltage_relay, void(voltage_relay::*)()&rang;::~Event_Check()</a> from alarms_events.o(t._ZN11Event_CheckI13voltage_relayMS0_FvvEED1Ev) referenced from alarms_events.o(i.__sti___17_alarms_events_cpp_5ed0bfbf)
 <LI><a href="#[80]">Menu_flash_rw::action()</a> from menu.o(i._ZN13Menu_flash_rw6actionEv) referenced from menu.o(.constdata__ZTV13Menu_flash_rw)
 <LI><a href="#[81]">Menu_flash_rw::menu_scr()</a> from menu.o(i._ZN13Menu_flash_rw8menu_scrEv) referenced from menu.o(.constdata__ZTV13Menu_flash_rw)
 <LI><a href="#[66]">Menu_flash_rw::~Menu_flash_rw()</a> from menu.o(i._ZN13Menu_flash_rwD1Ev) referenced from menu.o(.constdata__ZTV13Menu_flash_rw)
 <LI><a href="#[66]">Menu_flash_rw::~Menu_flash_rw()</a> from menu.o(i._ZN13Menu_flash_rwD1Ev) referenced from menu.o(i.__sti___8_menu_cpp_6e0c3973)
 <LI><a href="#[82]">voltage_relay::update()</a> from voltage_relay.o(i._ZN13voltage_relay6updateEv) referenced from voltage_relay.o(.constdata__ZTV13voltage_relay)
 <LI><a href="#[2e]">voltage_relay::execute()</a> from voltage_relay.o(i._ZN13voltage_relay7executeEv) referenced 2 times from voltage_relay.o(.data)
 <LI><a href="#[64]">voltage_relay::~voltage_relay()</a> from voltage_relay.o(i._ZN13voltage_relayD1Ev) referenced from voltage_relay.o(i.__sti___17_voltage_relay_cpp_vptr)
 <LI><a href="#[83]">Event_EEprom_Write::execute_task()</a> from alarms_events.o(i._ZN18Event_EEprom_Write12execute_taskEv) referenced from alarms_events.o(.constdata__ZTV18Event_EEprom_Write)
 <LI><a href="#[63]">Event_EEprom_Write::~Event_EEprom_Write()</a> from alarms_events.o(i._ZN18Event_EEprom_WriteD1Ev) referenced from alarms_events.o(.constdata__ZTV18Event_EEprom_Write)
 <LI><a href="#[63]">Event_EEprom_Write::~Event_EEprom_Write()</a> from alarms_events.o(i._ZN18Event_EEprom_WriteD1Ev) referenced from alarms_events.o(i.__sti___17_alarms_events_cpp_5ed0bfbf)
 <LI><a href="#[84]">Menu_Voltage_Relay::action()</a> from menu.o(i._ZN18Menu_Voltage_Relay6actionEv) referenced from menu.o(.constdata__ZTV18Menu_Voltage_Relay)
 <LI><a href="#[85]">Menu_Voltage_Relay::menu_scr()</a> from menu.o(i._ZN18Menu_Voltage_Relay8menu_scrEv) referenced from menu.o(.constdata__ZTV18Menu_Voltage_Relay)
 <LI><a href="#[68]">Menu_Voltage_Relay::~Menu_Voltage_Relay()</a> from menu.o(i._ZN18Menu_Voltage_RelayD1Ev) referenced from menu.o(.constdata__ZTV18Menu_Voltage_Relay)
 <LI><a href="#[68]">Menu_Voltage_Relay::~Menu_Voltage_Relay()</a> from menu.o(i._ZN18Menu_Voltage_RelayD1Ev) referenced from menu.o(i.__sti___8_menu_cpp_6e0c3973)
 <LI><a href="#[65]">Voltage_Relay_Executor::~Voltage_Relay_Executor()</a> from main_state_machine.o(i._ZN22Voltage_Relay_ExecutorD1Ev) referenced from main_state_machine.o(i.__sti___22_main_state_machine_cpp_c044dce6)
 <LI><a href="#[30]">[local to voltage_relay_cpp]::Alarm_Reset()</a> from voltage_relay.o(i._ZN35_INTERNAL_17_voltage_relay_cpp_vptr11Alarm_ResetEv) referenced 2 times from voltage_relay.o(.data)
 <LI><a href="#[2f]">[local to voltage_relay_cpp]::Alarm_Handler()</a> from voltage_relay.o(i._ZN35_INTERNAL_17_voltage_relay_cpp_vptr13Alarm_HandlerEv) referenced 2 times from voltage_relay.o(.data)
 <LI><a href="#[31]">[local to voltage_relay_cpp]::Voltage_Calculation()</a> from voltage_relay.o(i._ZN35_INTERNAL_17_voltage_relay_cpp_vptr19Voltage_CalculationEv) referenced 2 times from voltage_relay.o(.data)
 <LI><a href="#[5b]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[5d]">[local to stm32f0xx_hal_adc_c]::ADC_DMAError(__DMA_HandleTypeDef*)</a> from stm32f0xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_adc_c_52ef8f5012ADC_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[5c]">[local to stm32f0xx_hal_adc_c]::ADC_DMAConvCplt(__DMA_HandleTypeDef*)</a> from stm32f0xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_adc_c_52ef8f5015ADC_DMAConvCpltEP19__DMA_HandleTypeDef) referenced from stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[86]">Alarm::execute_task()</a> from alarms_events.o(i._ZN5Alarm12execute_taskEv) referenced from alarms_events.o(.constdata__ZTV5Alarm)
 <LI><a href="#[62]">Alarm::~Alarm()</a> from alarms_events.o(i._ZN5AlarmD1Ev) referenced from alarms_events.o(.constdata__ZTV5Alarm)
 <LI><a href="#[62]">Alarm::~Alarm()</a> from alarms_events.o(i._ZN5AlarmD1Ev) referenced from alarms_events.o(i.__sti___17_alarms_events_cpp_5ed0bfbf)
 <LI><a href="#[87]">Event::execute_task()</a> from alarms_events.o(i._ZN5Event12execute_taskEv) referenced from alarms_events.o(.constdata__ZTV5Event)
 <LI><a href="#[61]">Event::~Event()</a> from alarms_events.o(i._ZN5EventD1Ev) referenced from alarms_events.o(.constdata__ZTV5Event)
 <LI><a href="#[61]">Event::~Event()</a> from alarms_events.o(i._ZN5EventD1Ev) referenced from alarms_events.o(i.__sti___17_alarms_events_cpp_5ed0bfbf)
 <LI><a href="#[89]">Menu_Time::action()</a> from menu.o(i._ZN9Menu_Time6actionEv) referenced from menu.o(.constdata__ZTV9Menu_Time)
 <LI><a href="#[8a]">Menu_Time::menu_scr()</a> from menu.o(i._ZN9Menu_Time8menu_scrEv) referenced from menu.o(.constdata__ZTV9Menu_Time)
 <LI><a href="#[67]">Menu_Time::~Menu_Time()</a> from menu.o(i._ZN9Menu_TimeD1Ev) referenced from menu.o(.constdata__ZTV9Menu_Time)
 <LI><a href="#[67]">Menu_Time::~Menu_Time()</a> from menu.o(i._ZN9Menu_TimeD1Ev) referenced from menu.o(i.__sti___8_menu_cpp_6e0c3973)
 <LI><a href="#[8b]">Menu_item::action()</a> from menu.o(i._ZN9Menu_item6actionEv) referenced from menu.o(.constdata__ZTV9Menu_item)
 <LI><a href="#[8c]">Menu_item::menu_scr()</a> from menu.o(i._ZN9Menu_item8menu_scrEv) referenced from menu.o(.constdata__ZTV9Menu_item)
 <LI><a href="#[69]">Menu_item::~Menu_item()</a> from menu.o(i._ZN9Menu_itemD1Ev) referenced from menu.o(.constdata__ZTV9Menu_item)
 <LI><a href="#[69]">Menu_item::~Menu_item()</a> from menu.o(i._ZN9Menu_itemD1Ev) referenced from menu.o(i.__sti___8_menu_cpp_6e0c3973)
 <LI><a href="#[88]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from menu.o(.constdata__ZTV9Menu_Base)
 <LI><a href="#[94]">__main</a> from __main.o(!!!main) referenced from startup_stm32f071xb.o(.text)
 <LI><a href="#[8d]">__sti___10_Screen_cpp_scr</a> from screen.o(i.__sti___10_Screen_cpp_scr) referenced from screen.o(.init_array)
 <LI><a href="#[8f]">__sti___15_eeprom_user_cpp_93c2cf2d</a> from eeprom_user.o(i.__sti___15_eeprom_user_cpp_93c2cf2d) referenced from eeprom_user.o(.init_array)
 <LI><a href="#[92]">__sti___17_alarms_events_cpp_5ed0bfbf</a> from alarms_events.o(i.__sti___17_alarms_events_cpp_5ed0bfbf) referenced from alarms_events.o(.init_array)
 <LI><a href="#[90]">__sti___17_voltage_relay_cpp_vptr</a> from voltage_relay.o(i.__sti___17_voltage_relay_cpp_vptr) referenced from voltage_relay.o(.init_array)
 <LI><a href="#[91]">__sti___22_main_state_machine_cpp_c044dce6</a> from main_state_machine.o(i.__sti___22_main_state_machine_cpp_c044dce6) referenced from main_state_machine.o(.init_array)
 <LI><a href="#[8e]">__sti___8_eeprom_c_DataVar</a> from eeprom.o(i.__sti___8_eeprom_c_DataVar) referenced from eeprom.o(.init_array)
 <LI><a href="#[93]">__sti___8_menu_cpp_6e0c3973</a> from menu.o(i.__sti___8_menu_cpp_6e0c3973) referenced from menu.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[94]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[96]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[98]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[19b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[a1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[19e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[99]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[19f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[a6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[9c]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1b3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1b4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1b5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1b6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1b7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1b8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1b9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[97]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[cf]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1bd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time::menu_scr()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[34]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[46]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f071xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f071xb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1c0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_atexit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_voltage_relay_cpp_vptr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_menu_cpp_6e0c3973
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_alarms_events_cpp_5ed0bfbf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_main_state_machine_cpp_c044dce6
</UL>

<P><STRONG><a name="[192]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
</UL>

<P><STRONG><a name="[18f]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_item::menu_scr()
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[1c1]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_memmove4</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__aeabi_memmove</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rt_memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_memmove</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memmove.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[b0]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_init_f32
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1c6]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_adc_c]::ADC_Enable(ADC_HandleTypeDef*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_dma_c]::DMA_CalcBaseAndBitshift(__DMA_HandleTypeDef*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utoa_builtin_div(unsigned, char*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pass_filter::execute_filter(float)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_Init()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_Init()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time::menu_scr()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_to_char(std::tm&, char*)
</UL>

<P><STRONG><a name="[1c8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::calculate()
</UL>

<P><STRONG><a name="[1c9]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::calculate()
</UL>

<P><STRONG><a name="[1ca]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::calculate()
</UL>

<P><STRONG><a name="[1cb]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::calculate()
</UL>

<P><STRONG><a name="[b5]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[b4]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pass_filter::execute_filter(float)
</UL>

<P><STRONG><a name="[1cc]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[1cd]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::calculate()
</UL>

<P><STRONG><a name="[1ce]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[ab]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[aa]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[bb]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[bc]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[be]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[9d]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[bf]"></a>__rt_SIGPVFN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[5f]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[196]"></a>_fsqrt</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _fsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[1cf]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1d1]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c4]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[9a]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c6]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[e]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[c0]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[c2]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[c8]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[a8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[9f]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[ca]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[c3]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[a4]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c9]"></a>abort</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[c7]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[c5]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[cb]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1d5]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1d7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1d9]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d3]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1da]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; Voltage_Relay_Executor::push(OPERATION_BASE*) &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::push(OPERATION_BASE*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[db]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_Calibration_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_ADC_Init()
</UL>

<P><STRONG><a name="[18a]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_adc_c]::ADC_DMAConvCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[189]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_adc_c]::ADC_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[de]"></a>HAL_ADC_Init</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_ADC_Init()
</UL>

<P><STRONG><a name="[df]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, stm32f0xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_MspInit &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[e3]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f0xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_adc_c]::ADC_Enable(ADC_HandleTypeDef*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_ADC_Stop</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Stop &rArr; [local to stm32f0xx_hal_adc_c]::ADC_Disable(ADC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_adc_c]::ADC_ConversionStop(ADC_HandleTypeDef*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_adc_c]::ADC_Disable(ADC_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>HAL_ADC_Stop_DMA</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Stop_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Stop_DMA &rArr; [local to stm32f0xx_hal_adc_c]::ADC_Disable(ADC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_adc_c]::ADC_ConversionStop(ADC_HandleTypeDef*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_adc_c]::ADC_Disable(ADC_HandleTypeDef*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_DMA_Abort</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
</UL>

<P><STRONG><a name="[d7]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_DMA_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init &rArr; [local to stm32f0xx_hal_dma_c]::DMA_CalcBaseAndBitshift(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_dma_c]::DMA_CalcBaseAndBitshift(__DMA_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[e5]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; [local to stm32f0xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[ec]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f0xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase(unsigned)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_flash_ex_c]::FLASH_MassErase()
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::Erase_Page(unsigned)
</UL>

<P><STRONG><a name="[157]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Writes(Flash_Data*, unsigned short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_Format()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::Erase_Page(unsigned)
</UL>

<P><STRONG><a name="[ef]"></a>HAL_FLASH_Program</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_flash_c]::FLASH_Program_HalfWord(unsigned, unsigned short)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Writes(Flash_Data*, unsigned short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_Format()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[155]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Writes(Flash_Data*, unsigned short)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_Format()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::Erase_Page(unsigned)
</UL>

<P><STRONG><a name="[e0]"></a>HAL_GPIO_Init</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_MspInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
</UL>

<P><STRONG><a name="[11d]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_Off()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Digit::BSRR_Off()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_out()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to voltage_relay_cpp]::Alarm_Handler()
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to voltage_relay_cpp]::Alarm_Reset()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
</UL>

<P><STRONG><a name="[d9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_adc_c]::ADC_ConversionStop(ADC_HandleTypeDef*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_adc_c]::ADC_Disable(ADC_HandleTypeDef*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_adc_c]::ADC_Enable(ADC_HandleTypeDef*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[118]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[f4]"></a>HAL_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[101]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[151]"></a>HAL_PWR_ConfigPVD</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32f0xx_hal_pwr_ex.o(i.HAL_PWR_ConfigPVD))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
</UL>

<P><STRONG><a name="[152]"></a>HAL_PWR_EnablePVD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_pwr_ex.o(i.HAL_PWR_EnablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
</UL>

<P><STRONG><a name="[f9]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[f5]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[fa]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[fb]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 964 bytes, Stack size 32 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[144]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[fd]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[fc]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10c]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[186]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM6_Init()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
</UL>

<P><STRONG><a name="[fe]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM6_Init()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
</UL>

<P><STRONG><a name="[ff]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[188]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to voltage_relay_cpp]::Voltage_Calculation()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_tim_c]::TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
</UL>

<P><STRONG><a name="[108]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[107]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Screen_out() &rArr; Dig_num_out(const char&, bool) &rArr; clearSegments() &rArr; Segment::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; Screen_out() &rArr; Dig_num_out(const char&, bool) &rArr; clearSegments() &rArr; Segment::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_out()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Menu()
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_TSC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tsc.o(i.HAL_TSC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_TSC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tsc.o(i.HAL_TSC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>HAL_TSC_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f0xx_hal_tsc.o(i.HAL_TSC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TSC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_ErrorCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_ConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSC_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>HAL_TSC_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f0xx_hal_tsc.o(i.HAL_TSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TSC_Init &rArr; HAL_TSC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f0xx_hal_tsc_c]::TSC_extract_groups(unsigned)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TSC_Init()
</UL>

<P><STRONG><a name="[115]"></a>HAL_TSC_MspInit</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, stm32f0xx_hal_msp.o(i.HAL_TSC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TSC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_Init
</UL>

<P><STRONG><a name="[148]"></a>HAL_TSC_Start_IT</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f0xx_hal_tsc.o(i.HAL_TSC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TSC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankStartAcq()
</UL>

<P><STRONG><a name="[36]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_ProcessIT()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM1_BRK_UP_TRG_COM_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Screen_out() &rArr; Dig_num_out(const char&, bool) &rArr; clearSegments() &rArr; Segment::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::get_arr_ptr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Screen_out() &rArr; Dig_num_out(const char&, bool) &rArr; clearSegments() &rArr; Segment::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, stm32f0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[103]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f0xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[42]"></a>TSC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TSC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSC_IRQHandler &rArr; HAL_TSC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f071xb.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>_Error_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main_1.o(i._Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Default_Data(Flash_Data*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::push(OPERATION_BASE*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[10f]"></a>Screen_out()</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, screen.o(i._Z10Screen_outv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Screen_out() &rArr; Dig_num_out(const char&, bool) &rArr; clearSegments() &rArr; Segment::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen::delete_p(char*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Digit::BSRR_Off()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dig_num_out(const char&, bool)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[32]"></a>_MAIN_FUNC()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main_1.o(i._Z10_MAIN_FUNCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = _MAIN_FUNC() &rArr;  _MAIN_FUNC() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Action()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAIN_FUNC()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::run_task()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAIN_FUNC()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_1.o(.data)
</UL>
<P><STRONG><a name="[11c]"></a>Dig_num_out(const char&, bool)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, screen.o(i._Z11Dig_num_outRKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dig_num_out(const char&, bool) &rArr; clearSegments() &rArr; Segment::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSegments()
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_out()
</UL>

<P><STRONG><a name="[122]"></a>TSL_acq_Init()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tsl_acq_stm32f0xx.o(i._Z12TSL_acq_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_acq_Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_Init(const TSL_Bank_T*)
</UL>

<P><STRONG><a name="[123]"></a>TSL_tim_Init()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tsl_time_stm32f0xx.o(i._Z12TSL_tim_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_tim_Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_Init(const TSL_Bank_T*)
</UL>

<P><STRONG><a name="[15a]"></a>time_elapsed(unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, help.o(i._Z12time_elapsedthh))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::get_screen_voltage() const
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Menu()
</UL>

<P><STRONG><a name="[124]"></a>time_to_char(std::tm&, char*)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, screen.o(i._Z12time_to_charRSt2tmPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = time_to_char(std::tm&, char*) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, std::tm)
</UL>

<P><STRONG><a name="[126]"></a>TSL_ecs_CalcK(TSL_ObjectGroup_T*, unsigned short, unsigned short)</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, tsl_ecs.o(i._Z13TSL_ecs_CalcKP17TSL_ObjectGroup_Ttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TSL_ecs_CalcK(TSL_ObjectGroup_T*, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj(const TSL_Object_T*)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process(TSL_ObjectGroup_T*)
</UL>

<P><STRONG><a name="[7b]"></a>TSL_tkey_Init()</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, tsl_touchkey.o(i._Z13TSL_tkey_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_tkey_Init() &rArr; TSL_tkey_SetStateCalibration(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_SetStateCalibration(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>TSL_user_Init()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tsl_user.o(i._Z13TSL_user_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TSL_user_Init() &rArr; TSL_obj_GroupInit(TSL_ObjectGroup_T*)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_Init(const TSL_Bank_T*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupInit(TSL_ObjectGroup_T*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_SetThresholds()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>clearSegments()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, screen.o(i._Z13clearSegmentsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clearSegments() &rArr; Segment::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_Off()
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dig_num_out(const char&, bool)
</UL>

<P><STRONG><a name="[33]"></a>Call_Error_Menu()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu.o(i._Z15Call_Error_Menuv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Call_Error_Menu()
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::pop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[12e]"></a>EE_ReadVariable(unsigned short, unsigned short*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, eeprom.o(i._Z15EE_ReadVariabletPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_FindValidPage(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::find_data()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[ee]"></a>FLASH_PageErase(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_hal_flash_ex.o(i._Z15FLASH_PageErasej))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[149]"></a>TSL_acq_GetMeas(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tsl_acq_stm32f0xx.o(i._Z15TSL_acq_GetMeash))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult(unsigned char, unsigned short(*)(unsigned short, unsigned short), short(*)(short))
</UL>

<P><STRONG><a name="[130]"></a>TSL_ecs_Process(TSL_ObjectGroup_T*)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tsl_ecs.o(i._Z15TSL_ecs_ProcessP17TSL_ObjectGroup_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TSL_ecs_Process(TSL_ObjectGroup_T*) &rArr; TSL_ecs_CalcK(TSL_ObjectGroup_T*, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_CheckDelay_ms(unsigned short, volatile unsigned short*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK(TSL_ObjectGroup_T*, unsigned short)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_CalcK(TSL_ObjectGroup_T*, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Action()
</UL>

<P><STRONG><a name="[120]"></a>TSL_user_Action()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tsl_user.o(i._Z15TSL_user_Actionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TSL_user_Action() &rArr; TSL_ecs_Process(TSL_ObjectGroup_T*) &rArr; TSL_ecs_CalcK(TSL_ObjectGroup_T*, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_CheckDelay_ms(unsigned short, volatile unsigned short*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult(unsigned char, unsigned short(*)(unsigned short, unsigned short), short(*)(short))
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupProcess(TSL_ObjectGroup_T*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankStartAcq()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankConfig(unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_dxs_FirstObj(const TSL_ObjectGroup_T*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process(TSL_ObjectGroup_T*)
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAIN_FUNC()
</UL>

<P><STRONG><a name="[138]"></a>EE_WriteVariable(unsigned short, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, eeprom.o(i._Z16EE_WriteVariablett))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EE_WriteVariable(unsigned short, unsigned short) &rArr; [local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short) &rArr; [local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::write_data(unsigned short)
</UL>

<P><STRONG><a name="[13b]"></a>Renew_EEpromData(Flash_Data*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, eeprom_user.o(i._Z16Renew_EEpromDataP10Flash_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Renew_EEpromData(Flash_Data*) &rArr; Flash_Data::find_data() &rArr; EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subject::notify()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::find_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Default_Data(Flash_Data*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[137]"></a>TSL_dxs_FirstObj(const TSL_ObjectGroup_T*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsl_dxs.o(i._Z16TSL_dxs_FirstObjPK17TSL_ObjectGroup_T))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Action()
</UL>

<P><STRONG><a name="[132]"></a>TSL_ecs_ProcessK(TSL_ObjectGroup_T*, unsigned short)</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, tsl_ecs.o(i._Z16TSL_ecs_ProcessKP17TSL_ObjectGroup_Tt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TSL_ecs_ProcessK(TSL_ObjectGroup_T*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj(const TSL_Object_T*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_TestReferenceOutOfRange(TSL_ChannelData_T*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_ComputeMeas(unsigned short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process(TSL_ObjectGroup_T*)
</UL>

<P><STRONG><a name="[7c]"></a>TSL_tkey_Process()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tsl_touchkey.o(i._Z16TSL_tkey_Processv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_tkey_Process()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>utoa_builtin_div(unsigned, char*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, screen.o(i._Z16utoa_builtin_divjPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utoa_builtin_div(unsigned, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const unsigned short&)
</UL>

<P><STRONG><a name="[2d]"></a>EEprom_Write_Data(Flash_Data*, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, eeprom_user.o(i._Z17EEprom_Write_DataP10Flash_Datat))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = EEprom_Write_Data(Flash_Data*, unsigned short) &rArr; Flash_Data::write_data(unsigned short) &rArr; EE_WriteVariable(unsigned short, unsigned short) &rArr; [local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short) &rArr; [local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event::operator =(const Event&)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::pop()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::write_data(unsigned short)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::push(OPERATION_BASE*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom_user.o(.data)
</UL>
<P><STRONG><a name="[14a]"></a>TSL_acq_UseFilter(TSL_ChannelData_T*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_stm32f0xx.o(i._Z17TSL_acq_UseFilterP17TSL_ChannelData_T))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult(unsigned char, unsigned short(*)(unsigned short, unsigned short), short(*)(short))
</UL>

<P><STRONG><a name="[129]"></a>TSL_obj_GroupInit(TSL_ObjectGroup_T*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tsl_object.o(i._Z17TSL_obj_GroupInitP17TSL_ObjectGroup_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSL_obj_GroupInit(TSL_ObjectGroup_T*)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj(const TSL_Object_T*)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Init()
</UL>

<P><STRONG><a name="[117]"></a>TSL_tim_ProcessIT()</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, tsl_time.o(i._Z17TSL_tim_ProcessITv))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[177]"></a>time_elapsed_uint(unsigned short, const std::tm&, unsigned short, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, help.o(i._Z17time_elapsed_uinttRKSt2tmtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = time_elapsed_uint(unsigned short, const std::tm&, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::status_detection()
</UL>

<P><STRONG><a name="[143]"></a>SystemClock_Config()</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, main_1.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>TSL_acq_BankConfig(unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, tsl_acq_stm32f0xx.o(i._Z18TSL_acq_BankConfigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_acq_BankConfig(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Action()
</UL>

<P><STRONG><a name="[14c]"></a>TSL_acq_CheckNoise()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_stm32f0xx.o(i._Z18TSL_acq_CheckNoisev))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult(unsigned char, unsigned short(*)(unsigned short, unsigned short), short(*)(short))
</UL>

<P><STRONG><a name="[145]"></a>Write_Default_Data(Flash_Data*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, eeprom_user.o(i._Z18Write_Default_DataP10Flash_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Write_Default_Data(Flash_Data*) &rArr; EE_Writes(Flash_Data*, unsigned short) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Writes(Flash_Data*, unsigned short)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Renew_EEpromData(Flash_Data*)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>TSL_acq_ComputeMeas(unsigned short, short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tsl_acq_stm32f0xx.o(i._Z19TSL_acq_ComputeMeasts))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK(TSL_ObjectGroup_T*, unsigned short)
</UL>

<P><STRONG><a name="[134]"></a>TSL_acq_BankStartAcq()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tsl_acq_stm32f0xx.o(i._Z20TSL_acq_BankStartAcqv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_acq_BankStartAcq() &rArr; HAL_TSC_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_Start_IT
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Action()
</UL>

<P><STRONG><a name="[14b]"></a>TSL_acq_ComputeDelta(unsigned short, unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tsl_acq_stm32f0xx.o(i._Z20TSL_acq_ComputeDeltatt))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankGetResult(unsigned char, unsigned short(*)(unsigned short, unsigned short), short(*)(short))
</UL>

<P><STRONG><a name="[136]"></a>TSL_obj_GroupProcess(TSL_ObjectGroup_T*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tsl_object.o(i._Z20TSL_obj_GroupProcessP17TSL_ObjectGroup_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TSL_obj_GroupProcess(TSL_ObjectGroup_T*)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_SetGlobalObj(const TSL_Object_T*)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Action()
</UL>

<P><STRONG><a name="[127]"></a>TSL_obj_SetGlobalObj(const TSL_Object_T*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tsl_object.o(i._Z20TSL_obj_SetGlobalObjPK12TSL_Object_T))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupProcess(TSL_ObjectGroup_T*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_obj_GroupInit(TSL_ObjectGroup_T*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK(TSL_ObjectGroup_T*, unsigned short)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_CalcK(TSL_ObjectGroup_T*, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[135]"></a>TSL_acq_BankGetResult(unsigned char, unsigned short(*)(unsigned short, unsigned short), short(*)(short))</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, tsl_acq.o(i._Z21TSL_acq_BankGetResulthPFtttEPFssE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSL_acq_BankGetResult(unsigned char, unsigned short(*)(unsigned short, unsigned short), short(*)(short))
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_ComputeDelta(unsigned short, unsigned short)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_CheckNoise()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_UseFilter(TSL_ChannelData_T*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_GetMeas(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Action()
</UL>

<P><STRONG><a name="[131]"></a>TSL_tim_CheckDelay_ms(unsigned short, volatile unsigned short*)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tsl_time.o(i._Z21TSL_tim_CheckDelay_mstPVt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_tim_CheckDelay_ms(unsigned short, volatile unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard::get_state(SENSOR_NAME, SENSOR_STATE)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_Process(TSL_ObjectGroup_T*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Action()
</UL>

<P><STRONG><a name="[14d]"></a>TSL_tkey_GetStateMask()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tsl_touchkey.o(i._Z21TSL_tkey_GetStateMaskv))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_DebErrorStateProcess()
</UL>

<P><STRONG><a name="[12b]"></a>TSL_user_SetThresholds()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tsl_user.o(i._Z22TSL_user_SetThresholdsv))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Init()
</UL>

<P><STRONG><a name="[7a]"></a>MyTKeys_OffStateProcess()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tsl_user.o(i._Z23MyTKeys_OffStateProcessv))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTKeys_OffStateProcess()
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTKeys_OffStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>MyTKeys_ErrorStateProcess()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tsl_user.o(i._Z25MyTKeys_ErrorStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MyTKeys_ErrorStateProcess() &rArr; TSL_tkey_CalibrationStateProcess()
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_CalibrationStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>TSL_tkey_ProxStateProcess()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tsl_touchkey.o(i._Z25TSL_tkey_ProxStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_tkey_ProxStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>TSL_tkey_TouchStateProcess()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tsl_touchkey.o(i._Z26TSL_tkey_TouchStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_tkey_TouchStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>TSL_tkey_DetectStateProcess()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tsl_touchkey.o(i._Z27TSL_tkey_DetectStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSL_tkey_DetectStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>TSL_tkey_DebProxStateProcess()</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, tsl_touchkey.o(i._Z28TSL_tkey_DebProxStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebProxStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>TSL_tkey_ReleaseStateProcess()</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, tsl_touchkey.o(i._Z28TSL_tkey_ReleaseStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_tkey_ReleaseStateProcess() &rArr; TSL_tkey_SetStateCalibration(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_SetStateCalibration(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>TSL_tkey_SetStateCalibration(unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, tsl_touchkey.o(i._Z28TSL_tkey_SetStateCalibrationh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_SetStateCalibration(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_DebCalibrationStateProcess()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_DebErrorStateProcess()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_ReleaseStateProcess()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_ecs.o(i._Z16TSL_ecs_ProcessKP17TSL_ObjectGroup_Tt)
</UL>
<P><STRONG><a name="[79]"></a>TSL_tkey_DebErrorStateProcess()</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tsl_touchkey.o(i._Z29TSL_tkey_DebErrorStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_tkey_DebErrorStateProcess() &rArr; TSL_tkey_SetStateCalibration(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_GetStateMask()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_SetStateCalibration(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>TSL_tkey_DebDetectStateProcess()</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, tsl_touchkey.o(i._Z30TSL_tkey_DebDetectStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebDetectStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>TSL_acq_TestReferenceOutOfRange(TSL_ChannelData_T*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_stm32f0xx.o(i._Z31TSL_acq_TestReferenceOutOfRangeP17TSL_ChannelData_T))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_ecs_ProcessK(TSL_ObjectGroup_T*, unsigned short)
</UL>

<P><STRONG><a name="[6b]"></a>TSL_tkey_CalibrationStateProcess()</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tsl_touchkey.o(i._Z32TSL_tkey_CalibrationStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_tkey_CalibrationStateProcess()
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_TestFirstReferenceIsValid(TSL_ChannelData_T*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTKeys_ErrorStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>TSL_acq_TestFirstReferenceIsValid(TSL_ChannelData_T*, unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tsl_acq_stm32f0xx.o(i._Z33TSL_acq_TestFirstReferenceIsValidP17TSL_ChannelData_Tt))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_CalibrationStateProcess()
</UL>

<P><STRONG><a name="[74]"></a>TSL_tkey_DebProxTouchStateProcess()</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, tsl_touchkey.o(i._Z33TSL_tkey_DebProxTouchStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebProxTouchStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>TSL_tkey_DebProxDetectStateProcess()</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, tsl_touchkey.o(i._Z34TSL_tkey_DebProxDetectStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebProxDetectStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>TSL_tkey_DebCalibrationStateProcess()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tsl_touchkey.o(i._Z35TSL_tkey_DebCalibrationStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TSL_tkey_DebCalibrationStateProcess() &rArr; TSL_tkey_SetStateCalibration(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tkey_SetStateCalibration(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>TSL_tkey_DebReleaseProxStateProcess()</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, tsl_touchkey.o(i._Z35TSL_tkey_DebReleaseProxStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebReleaseProxStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>TSL_tkey_DebReleaseTouchStateProcess()</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, tsl_touchkey.o(i._Z36TSL_tkey_DebReleaseTouchStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebReleaseTouchStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>TSL_tkey_DebReleaseDetectStateProcess()</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, tsl_touchkey.o(i._Z37TSL_tkey_DebReleaseDetectStateProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TSL_tkey_DebReleaseDetectStateProcess()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tsl_user.o(.constdata)
</UL>
<P><STRONG><a name="[14]"></a>num_0()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, screen.o(i._Z5num_0v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num_0() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>num_1()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, screen.o(i._Z5num_1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num_1() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>num_2()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, screen.o(i._Z5num_2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num_2() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>num_3()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, screen.o(i._Z5num_3v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num_3() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>num_4()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, screen.o(i._Z5num_4v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num_4() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>num_5()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, screen.o(i._Z5num_5v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num_5() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>num_6()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, screen.o(i._Z5num_6v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num_6() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>num_7()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(i._Z5num_7v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num_7() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>num_8()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, screen.o(i._Z5num_8v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num_8() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>num_9()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, screen.o(i._Z5num_9v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = num_9() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>point()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, screen.o(i._Z5pointv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = point() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[150]"></a>power()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main_1.o(i._Z5powerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = power()
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnablePVD
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_ConfigPVD
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>EE_Init()</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, eeprom.o(i._Z7EE_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EE_Init() &rArr; [local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable(unsigned short, unsigned short*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_Format()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::page_is_blank(unsigned)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::Erase_Page(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>do_Menu()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, menu.o(i._Z7do_Menuv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = do_Menu()
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_elapsed(unsigned short, unsigned char, unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard::any_key_pressed()
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[12a]"></a>TSL_Init(const TSL_Bank_T*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tsl.o(i._Z8TSL_InitPK10TSL_Bank_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TSL_Init(const TSL_Bank_T*) &rArr; TSL_tim_Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_Init()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Init()
</UL>

<P><STRONG><a name="[1e]"></a>letter_A()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, screen.o(i._Z8letter_Av))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_A() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>letter_C()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, screen.o(i._Z8letter_Cv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_C() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>letter_E()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, screen.o(i._Z8letter_Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_E() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>letter_L()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(i._Z8letter_Lv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_L() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>letter_O()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, screen.o(i._Z8letter_Ov))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_O() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>letter_a()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, screen.o(i._Z8letter_av))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_a() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>letter_b()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, screen.o(i._Z8letter_bv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_b() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>letter_c()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(i._Z8letter_cv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_c() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>letter_d()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, screen.o(i._Z8letter_dv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_d() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>letter_f()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, screen.o(i._Z8letter_fv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_f() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>letter_h()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, screen.o(i._Z8letter_hv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_h() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>letter_n()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, screen.o(i._Z8letter_nv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_n() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>letter_o()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, screen.o(i._Z8letter_ov))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_o() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>letter_r()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, screen.o(i._Z8letter_rv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_r() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>letter_t()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, screen.o(i._Z8letter_tv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = letter_t() &rArr; Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_On()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.data)
</UL>
<P><STRONG><a name="[146]"></a>EE_Writes(Flash_Data*, unsigned short)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, eeprom_user.o(i._Z9EE_WritesP10Flash_Datat))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EE_Writes(Flash_Data*, unsigned short) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Default_Data(Flash_Data*)
</UL>

<P><STRONG><a name="[147]"></a>SoftDelay(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tsl_acq_stm32f0xx.o(i._Z9SoftDelayj))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_acq_BankStartAcq()
</UL>

<P><STRONG><a name="[191]"></a>clear_buf(Screen&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, screen.o(i._Z9clear_bufR6Screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_buf(Screen&)
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, std::tm)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const unsigned short&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
</UL>

<P><STRONG><a name="[15b]"></a>Flash_Data::check_data(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eeprom_user.o(i._ZN10Flash_Data10check_dataEt))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::write_data(unsigned short)
</UL>

<P><STRONG><a name="[141]"></a>Flash_Data::write_data(unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eeprom_user.o(i._ZN10Flash_Data10write_dataEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Flash_Data::write_data(unsigned short) &rArr; EE_WriteVariable(unsigned short, unsigned short) &rArr; [local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short) &rArr; [local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subject::notify()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::find_data()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::check_data(unsigned short)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Data(Flash_Data*, unsigned short)
</UL>

<P><STRONG><a name="[13c]"></a>Flash_Data::find_data()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eeprom_user.o(i._ZN10Flash_Data9find_dataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Data::find_data() &rArr; EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::write_data(unsigned short)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Renew_EEpromData(Flash_Data*)
</UL>

<P><STRONG><a name="[194]"></a>Flash_Data::Flash_Data(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eeprom_user.o(i._ZN10Flash_DataC1Etttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Data::Flash_Data(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_eeprom_user_cpp_93c2cf2d
</UL>

<P><STRONG><a name="[1dc]"></a>Flash_Data::Flash_Data__sub_object(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, eeprom_user.o(i._ZN10Flash_DataC1Etttt), UNUSED)

<P><STRONG><a name="[7d]"></a>Menu_Error::action()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, menu.o(i._ZN10Menu_Error6actionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Menu_Error::action() &rArr; keyboard::get_state(SENSOR_NAME, SENSOR_STATE) &rArr; TSL_tim_CheckDelay_ms(unsigned short, volatile unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard::get_state(SENSOR_NAME, SENSOR_STATE)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata__ZTV10Menu_Error)
</UL>
<P><STRONG><a name="[7e]"></a>Menu_Error::menu_scr()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu.o(i._ZN10Menu_Error8menu_scrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Menu_Error::menu_scr() &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata__ZTV10Menu_Error)
</UL>
<P><STRONG><a name="[6a]"></a>Menu_Error::~Menu_Error()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i._ZN10Menu_ErrorD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> menu.o(i.__sti___8_menu_cpp_6e0c3973)
<LI> menu.o(.constdata__ZTV10Menu_Error)
</UL>
<P><STRONG><a name="[1dd]"></a>Menu_Error::~Menu_Error__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, menu.o(i._ZN10Menu_ErrorD1Ev), UNUSED)

<P><STRONG><a name="[15d]"></a>voltage_acq::filter_voltage()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, voltage_acq.o(i._ZN11voltage_acq14filter_voltageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = voltage_acq::filter_voltage() &rArr; low_pass_filter::execute_filter(float) &rArr; arm_fir_f32 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pass_filter::execute_filter(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::calculate()
</UL>

<P><STRONG><a name="[170]"></a>voltage_acq::get_ptr()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, voltage_acq.o(i._ZN11voltage_acq7get_ptrEv))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::get_arr_ptr()
</UL>

<P><STRONG><a name="[15f]"></a>voltage_acq::calculate()</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, voltage_acq.o(i._ZN11voltage_acq9calculateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = voltage_acq::calculate() &rArr; voltage_acq::filter_voltage() &rArr; low_pass_filter::execute_filter(float) &rArr; arm_fir_f32 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::filter_voltage()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to voltage_relay_cpp]::Voltage_Calculation()
</UL>

<P><STRONG><a name="[168]"></a>Menu_flash_rw::change_data()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, menu.o(i._ZN13Menu_flash_rw11change_dataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Menu_flash_rw::change_data() &rArr; Voltage_Relay_Executor::push(OPERATION_BASE*) &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::push(OPERATION_BASE*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_EEprom_Write::set_task(void(*&)(Flash_Data*, unsigned short), Flash_Data*, unsigned short)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time::action()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::action()
</UL>

<P><STRONG><a name="[80]"></a>Menu_flash_rw::action()</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, menu.o(i._ZN13Menu_flash_rw6actionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Menu_flash_rw::action() &rArr; Menu_flash_rw::change_data() &rArr; Voltage_Relay_Executor::push(OPERATION_BASE*) &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::get_value() const
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard::get_state(SENSOR_NAME, SENSOR_STATE)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::change_data()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata__ZTV13Menu_flash_rw)
</UL>
<P><STRONG><a name="[81]"></a>Menu_flash_rw::menu_scr()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, menu.o(i._ZN13Menu_flash_rw8menu_scrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Menu_flash_rw::menu_scr() &rArr; operator &lang;&lang;(Screen&, const unsigned short&) &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const unsigned short&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata__ZTV13Menu_flash_rw)
</UL>
<P><STRONG><a name="[16e]"></a>Menu_flash_rw::Menu_flash_rw(const char*, Flash_Data&, Menu_Base*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, menu.o(i._ZN13Menu_flash_rwC1EPKcR10Flash_DataP9Menu_Base))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Menu_flash_rw::Menu_flash_rw(const char*, Flash_Data&, Menu_Base*)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Base::Menu_Base__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time::Menu_Time(const char*, Flash_Data&, Menu_Base*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_menu_cpp_6e0c3973
</UL>

<P><STRONG><a name="[1de]"></a>Menu_flash_rw::Menu_flash_rw__sub_object(const char*, Flash_Data&, Menu_Base*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, menu.o(i._ZN13Menu_flash_rwC1EPKcR10Flash_DataP9Menu_Base), UNUSED)

<P><STRONG><a name="[66]"></a>Menu_flash_rw::~Menu_flash_rw()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i._ZN13Menu_flash_rwD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> menu.o(i.__sti___8_menu_cpp_6e0c3973)
<LI> menu.o(.constdata__ZTV13Menu_flash_rw)
</UL>
<P><STRONG><a name="[1df]"></a>Menu_flash_rw::~Menu_flash_rw__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, menu.o(i._ZN13Menu_flash_rwD1Ev), UNUSED)

<P><STRONG><a name="[119]"></a>voltage_relay::get_arr_ptr()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, voltage_relay.o(i._ZN13voltage_relay11get_arr_ptrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = voltage_relay::get_arr_ptr()
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::get_ptr()
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>voltage_relay::reset_alarm()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, voltage_relay.o(i._ZN13voltage_relay11reset_alarmEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = voltage_relay::reset_alarm() &rArr; Voltage_Relay_Executor::push(OPERATION_BASE*) &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::push(OPERATION_BASE*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm::set_task(void(*&)())
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::status_detection()
</UL>

<P><STRONG><a name="[173]"></a>voltage_relay::generate_alarm()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, voltage_relay.o(i._ZN13voltage_relay14generate_alarmEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = voltage_relay::generate_alarm() &rArr; Voltage_Relay_Executor::push(OPERATION_BASE*) &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::push(OPERATION_BASE*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alarm::set_task(void(*&)())
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::status_detection()
</UL>

<P><STRONG><a name="[174]"></a>voltage_relay::status_detection()</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, voltage_relay.o(i._ZN13voltage_relay16status_detectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = voltage_relay::status_detection() &rArr; voltage_relay::generate_alarm() &rArr; Voltage_Relay_Executor::push(OPERATION_BASE*) &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_elapsed_uint(unsigned short, const std::tm&, unsigned short, unsigned short)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::get_voltage() const
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::generate_alarm()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::reset_alarm()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::execute()
</UL>

<P><STRONG><a name="[178]"></a>voltage_relay::get_voltage_to_screen()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, voltage_relay.o(i._ZN13voltage_relay21get_voltage_to_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = voltage_relay::get_voltage_to_screen() &rArr; voltage_acq::get_screen_voltage() const
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::get_screen_voltage() const
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Voltage_Relay::menu_scr()
</UL>

<P><STRONG><a name="[82]"></a>voltage_relay::update()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, voltage_relay.o(i._ZN13voltage_relay6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = voltage_relay::update()
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::get_value() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> voltage_relay.o(.constdata__ZTV13voltage_relay)
</UL>
<P><STRONG><a name="[2e]"></a>voltage_relay::execute()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, voltage_relay.o(i._ZN13voltage_relay7executeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = voltage_relay::execute() &rArr; voltage_relay::status_detection() &rArr; voltage_relay::generate_alarm() &rArr; Voltage_Relay_Executor::push(OPERATION_BASE*) &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::status_detection()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> voltage_relay.o(.data)
</UL>
<P><STRONG><a name="[17a]"></a>voltage_relay::voltage_relay(Flash_Data*)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, voltage_relay.o(i._ZN13voltage_relayC1EP10Flash_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = voltage_relay::voltage_relay(Flash_Data*) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::get_value() const
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_init_f32
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Subject::attach(Observer*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_voltage_relay_cpp_vptr
</UL>

<P><STRONG><a name="[1e0]"></a>voltage_relay::voltage_relay__sub_object(Flash_Data*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, voltage_relay.o(i._ZN13voltage_relayC1EP10Flash_Data), UNUSED)

<P><STRONG><a name="[64]"></a>voltage_relay::~voltage_relay()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, voltage_relay.o(i._ZN13voltage_relayD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = voltage_relay::~voltage_relay() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> voltage_relay.o(i.__sti___17_voltage_relay_cpp_vptr)
</UL>
<P><STRONG><a name="[1e1]"></a>voltage_relay::~voltage_relay__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, voltage_relay.o(i._ZN13voltage_relayD1Ev), UNUSED)

<P><STRONG><a name="[15e]"></a>low_pass_filter::execute_filter(float)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, voltage_acq.o(i._ZN15low_pass_filter14execute_filterEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = low_pass_filter::execute_filter(float) &rArr; arm_fir_f32 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_f32
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::filter_voltage()
</UL>

<P><STRONG><a name="[83]"></a>Event_EEprom_Write::execute_task()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alarms_events.o(i._ZN18Event_EEprom_Write12execute_taskEv))
<BR>[Address Reference Count : 1]<UL><LI> alarms_events.o(.constdata__ZTV18Event_EEprom_Write)
</UL>
<P><STRONG><a name="[16b]"></a>Event_EEprom_Write::set_task(void(*&)(Flash_Data*, unsigned short), Flash_Data*, unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, alarms_events.o(i._ZN18Event_EEprom_Write8set_taskERPFvP10Flash_DatatES1_t))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::change_data()
</UL>

<P><STRONG><a name="[63]"></a>Event_EEprom_Write::~Event_EEprom_Write()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, alarms_events.o(i._ZN18Event_EEprom_WriteD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> alarms_events.o(i.__sti___17_alarms_events_cpp_5ed0bfbf)
<LI> alarms_events.o(.constdata__ZTV18Event_EEprom_Write)
</UL>
<P><STRONG><a name="[1e2]"></a>Event_EEprom_Write::~Event_EEprom_Write__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, alarms_events.o(i._ZN18Event_EEprom_WriteD1Ev), UNUSED)

<P><STRONG><a name="[84]"></a>Menu_Voltage_Relay::action()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu.o(i._ZN18Menu_Voltage_Relay6actionEv))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata__ZTV18Menu_Voltage_Relay)
</UL>
<P><STRONG><a name="[85]"></a>Menu_Voltage_Relay::menu_scr()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, menu.o(i._ZN18Menu_Voltage_Relay8menu_scrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Menu_Voltage_Relay::menu_scr() &rArr; operator &lang;&lang;(Screen&, const unsigned short&) &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const unsigned short&)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::get_voltage_to_screen()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata__ZTV18Menu_Voltage_Relay)
</UL>
<P><STRONG><a name="[68]"></a>Menu_Voltage_Relay::~Menu_Voltage_Relay()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i._ZN18Menu_Voltage_RelayD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> menu.o(i.__sti___8_menu_cpp_6e0c3973)
<LI> menu.o(.constdata__ZTV18Menu_Voltage_Relay)
</UL>
<P><STRONG><a name="[1e3]"></a>Menu_Voltage_Relay::~Menu_Voltage_Relay__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, menu.o(i._ZN18Menu_Voltage_RelayD1Ev), UNUSED)

<P><STRONG><a name="[12d]"></a>Voltage_Relay_Executor::pop()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main_state_machine.o(i._ZN22Voltage_Relay_Executor3popEv))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to voltage_relay_cpp]::Voltage_Calculation()
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to voltage_relay_cpp]::Alarm_Handler()
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to voltage_relay_cpp]::Alarm_Reset()
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Data(Flash_Data*, unsigned short)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call_Error_Menu()
</UL>

<P><STRONG><a name="[d5]"></a>Voltage_Relay_Executor::push(OPERATION_BASE*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main_state_machine.o(i._ZN22Voltage_Relay_Executor4pushEP14OPERATION_BASE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Voltage_Relay_Executor::push(OPERATION_BASE*) &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Data(Flash_Data*, unsigned short)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::change_data()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::generate_alarm()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::reset_alarm()
</UL>

<P><STRONG><a name="[11f]"></a>Voltage_Relay_Executor::run_task()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main_state_machine.o(i._ZN22Voltage_Relay_Executor8run_taskEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Voltage_Relay_Executor::run_task()
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stack&lang;OPERATION_BASE*&rang;::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAIN_FUNC()
</UL>

<P><STRONG><a name="[65]"></a>Voltage_Relay_Executor::~Voltage_Relay_Executor()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main_state_machine.o(i._ZN22Voltage_Relay_ExecutorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Voltage_Relay_Executor::~Voltage_Relay_Executor() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_state_machine.o(i.__sti___22_main_state_machine_cpp_c044dce6)
</UL>
<P><STRONG><a name="[1e4]"></a>Voltage_Relay_Executor::~Voltage_Relay_Executor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main_state_machine.o(i._ZN22Voltage_Relay_ExecutorD1Ev), UNUSED)

<P><STRONG><a name="[86]"></a>Alarm::execute_task()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, alarms_events.o(i._ZN5Alarm12execute_taskEv))
<BR>[Address Reference Count : 1]<UL><LI> alarms_events.o(.constdata__ZTV5Alarm)
</UL>
<P><STRONG><a name="[172]"></a>Alarm::set_task(void(*&)())</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, alarms_events.o(i._ZN5Alarm8set_taskERPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::generate_alarm()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::reset_alarm()
</UL>

<P><STRONG><a name="[62]"></a>Alarm::~Alarm()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, alarms_events.o(i._ZN5AlarmD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> alarms_events.o(i.__sti___17_alarms_events_cpp_5ed0bfbf)
<LI> alarms_events.o(.constdata__ZTV5Alarm)
</UL>
<P><STRONG><a name="[1e5]"></a>Alarm::~Alarm__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, alarms_events.o(i._ZN5AlarmD1Ev), UNUSED)

<P><STRONG><a name="[11e]"></a>Digit::BSRR_Off()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen.o(i._ZN5Digit8BSRR_OffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Digit::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Digit::Digit(GPIO_TypeDef*, unsigned short)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_out()
</UL>

<P><STRONG><a name="[18b]"></a>Digit::Digit(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen.o(i._ZN5DigitC1EP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Digit::Digit(GPIO_TypeDef*, unsigned short) &rArr; Digit::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Digit::BSRR_Off()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Screen_cpp_scr
</UL>

<P><STRONG><a name="[1e6]"></a>Digit::Digit__sub_object(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen.o(i._ZN5DigitC1EP12GPIO_TypeDeft), UNUSED)

<P><STRONG><a name="[87]"></a>Event::execute_task()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, alarms_events.o(i._ZN5Event12execute_taskEv))
<BR>[Address Reference Count : 1]<UL><LI> alarms_events.o(.constdata__ZTV5Event)
</UL>
<P><STRONG><a name="[61]"></a>Event::~Event()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, alarms_events.o(i._ZN5EventD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> alarms_events.o(i.__sti___17_alarms_events_cpp_5ed0bfbf)
<LI> alarms_events.o(.constdata__ZTV5Event)
</UL>
<P><STRONG><a name="[1e7]"></a>Event::~Event__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, alarms_events.o(i._ZN5EventD1Ev), UNUSED)

<P><STRONG><a name="[142]"></a>Event::operator =(const Event&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, alarms_events.o(i._ZN5EventaSERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEprom_Write_Data(Flash_Data*, unsigned short)
</UL>

<P><STRONG><a name="[11b]"></a>Screen::delete_p(char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, screen.o(i._ZN6Screen8delete_pEPc))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_out()
</UL>

<P><STRONG><a name="[14f]"></a>Segment::BSRR_On()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen.o(i._ZN7Segment7BSRR_OnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Segment::BSRR_On()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_t()
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_r()
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_o()
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_n()
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_h()
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_f()
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_d()
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_c()
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_b()
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_a()
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_O()
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_L()
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_E()
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_C()
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;letter_A()
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;point()
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_9()
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_8()
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_7()
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_6()
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_5()
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_4()
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_3()
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_2()
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_1()
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_0()
</UL>

<P><STRONG><a name="[12c]"></a>Segment::BSRR_Off()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, screen.o(i._ZN7Segment8BSRR_OffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Segment::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::Segment(GPIO_TypeDef*, unsigned short)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearSegments()
</UL>

<P><STRONG><a name="[18c]"></a>Segment::Segment(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, screen.o(i._ZN7SegmentC1EP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Segment::Segment(GPIO_TypeDef*, unsigned short) &rArr; Segment::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::BSRR_Off()
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Screen_cpp_scr
</UL>

<P><STRONG><a name="[1e8]"></a>Segment::Segment__sub_object(GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen.o(i._ZN7SegmentC1EP12GPIO_TypeDeft), UNUSED)

<P><STRONG><a name="[17d]"></a>Subject::attach(Observer*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, observer.o(i._ZN7Subject6attachEP8Observer))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::voltage_relay(Flash_Data*)
</UL>

<P><STRONG><a name="[13d]"></a>Subject::notify()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, observer.o(i._ZN7Subject6notifyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Subject::notify()
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::write_data(unsigned short)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Renew_EEpromData(Flash_Data*)
</UL>

<P><STRONG><a name="[159]"></a>keyboard::any_key_pressed()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, keyboard.o(i._ZN8keyboard15any_key_pressedEv))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_Menu()
</UL>

<P><STRONG><a name="[15c]"></a>keyboard::get_state(SENSOR_NAME, SENSOR_STATE)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, keyboard.o(i._ZN8keyboard9get_stateE11SENSOR_NAME12SENSOR_STATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = keyboard::get_state(SENSOR_NAME, SENSOR_STATE) &rArr; TSL_tim_CheckDelay_ms(unsigned short, volatile unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_tim_CheckDelay_ms(unsigned short, volatile unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_item::action()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time::action()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::action()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Error::action()
</UL>

<P><STRONG><a name="[16f]"></a>Menu_Base::Menu_Base__sub_object(const char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, menu.o(i._ZN9Menu_BaseC2EPKc))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_item::Menu_item(const char*, unsigned char, ...)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::Menu_flash_rw(const char*, Flash_Data&, Menu_Base*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_menu_cpp_6e0c3973
</UL>

<P><STRONG><a name="[89]"></a>Menu_Time::action()</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, menu.o(i._ZN9Menu_Time6actionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Menu_Time::action() &rArr; Menu_flash_rw::change_data() &rArr; Voltage_Relay_Executor::push(OPERATION_BASE*) &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::get_value() const
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard::get_state(SENSOR_NAME, SENSOR_STATE)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::change_data()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata__ZTV9Menu_Time)
</UL>
<P><STRONG><a name="[8a]"></a>Menu_Time::menu_scr()</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, menu.o(i._ZN9Menu_Time8menu_scrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Menu_Time::menu_scr() &rArr; operator &lang;&lang;(Screen&, std::tm) &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, std::tm)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::get_value() const
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata__ZTV9Menu_Time)
</UL>
<P><STRONG><a name="[18e]"></a>Menu_Time::Menu_Time(const char*, Flash_Data&, Menu_Base*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, menu.o(i._ZN9Menu_TimeC1EPKcR10Flash_DataP9Menu_Base))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Menu_Time::Menu_Time(const char*, Flash_Data&, Menu_Base*) &rArr; Menu_flash_rw::Menu_flash_rw(const char*, Flash_Data&, Menu_Base*)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::Menu_flash_rw(const char*, Flash_Data&, Menu_Base*)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_menu_cpp_6e0c3973
</UL>

<P><STRONG><a name="[1e9]"></a>Menu_Time::Menu_Time__sub_object(const char*, Flash_Data&, Menu_Base*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, menu.o(i._ZN9Menu_TimeC1EPKcR10Flash_DataP9Menu_Base), UNUSED)

<P><STRONG><a name="[67]"></a>Menu_Time::~Menu_Time()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menu.o(i._ZN9Menu_TimeD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> menu.o(i.__sti___8_menu_cpp_6e0c3973)
<LI> menu.o(.constdata__ZTV9Menu_Time)
</UL>
<P><STRONG><a name="[1ea]"></a>Menu_Time::~Menu_Time__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, menu.o(i._ZN9Menu_TimeD1Ev), UNUSED)

<P><STRONG><a name="[8b]"></a>Menu_item::action()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, menu.o(i._ZN9Menu_item6actionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Menu_item::action() &rArr; keyboard::get_state(SENSOR_NAME, SENSOR_STATE) &rArr; TSL_tim_CheckDelay_ms(unsigned short, volatile unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard::get_state(SENSOR_NAME, SENSOR_STATE)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata__ZTV9Menu_item)
</UL>
<P><STRONG><a name="[8c]"></a>Menu_item::menu_scr()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, menu.o(i._ZN9Menu_item8menu_scrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Menu_item::menu_scr() &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata__ZTV9Menu_item)
</UL>
<P><STRONG><a name="[190]"></a>Menu_item::Menu_item(const char*, unsigned char, ...)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, menu.o(i._ZN9Menu_itemC1EPKchz))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Menu_item::Menu_item(const char*, unsigned char, ...) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Base::Menu_Base__sub_object(const char*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_menu_cpp_6e0c3973
</UL>

<P><STRONG><a name="[1eb]"></a>Menu_item::Menu_item__sub_object(const char*, unsigned char, ...)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, menu.o(i._ZN9Menu_itemC1EPKchz), UNUSED)

<P><STRONG><a name="[69]"></a>Menu_item::~Menu_item()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, menu.o(i._ZN9Menu_itemD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Menu_item::~Menu_item() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> menu.o(i.__sti___8_menu_cpp_6e0c3973)
<LI> menu.o(.constdata__ZTV9Menu_item)
</UL>
<P><STRONG><a name="[1ec]"></a>Menu_item::~Menu_item__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, menu.o(i._ZN9Menu_itemD1Ev), UNUSED)

<P><STRONG><a name="[16c]"></a>Flash_Data::get_value() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eeprom_user.o(i._ZNK10Flash_Data9get_valueEv))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time::menu_scr()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time::action()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::action()
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::voltage_relay(Flash_Data*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::update()
</UL>

<P><STRONG><a name="[175]"></a>voltage_acq::get_voltage() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, voltage_acq.o(i._ZNK11voltage_acq11get_voltageEv))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::status_detection()
</UL>

<P><STRONG><a name="[179]"></a>voltage_acq::get_screen_voltage() const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, voltage_acq.o(i._ZNK11voltage_acq18get_screen_voltageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = voltage_acq::get_screen_voltage() const
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_elapsed(unsigned short, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::get_voltage_to_screen()
</UL>

<P><STRONG><a name="[17e]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_item::~Menu_item()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::~Voltage_Relay_Executor()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::~voltage_relay()
</UL>

<P><STRONG><a name="[169]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::change_data()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::~Voltage_Relay_Executor()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::~voltage_relay()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[11a]"></a>operator &lang;&lang;(Screen&, const char*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, screen.o(i._ZlsR6ScreenPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf(Screen&)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, std::tm)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const unsigned short&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_item::menu_scr()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Error::menu_scr()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM6_Init()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TSC_Init()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_ADC_Init()
</UL>

<P><STRONG><a name="[16d]"></a>operator &lang;&lang;(Screen&, const unsigned short&)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, screen.o(i._ZlsR6ScreenRKt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = operator &lang;&lang;(Screen&, const unsigned short&) &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf(Screen&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utoa_builtin_div(unsigned, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Voltage_Relay::menu_scr()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::menu_scr()
</UL>

<P><STRONG><a name="[18d]"></a>operator &lang;&lang;(Screen&, std::tm)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, screen.o(i._ZlsR6ScreenSt2tm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = operator &lang;&lang;(Screen&, std::tm) &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_buf(Screen&)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_to_char(std::tm&, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time::menu_scr()
</UL>

<P><STRONG><a name="[17b]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_eeprom_user_cpp_93c2cf2d
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_item::Menu_item(const char*, unsigned char, ...)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_main_state_machine_cpp_c044dce6
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::voltage_relay(Flash_Data*)
</UL>

<P><STRONG><a name="[16a]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_eeprom_user_cpp_93c2cf2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_eeprom_c_DataVar
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::change_data()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___22_main_state_machine_cpp_c044dce6
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::voltage_relay(Flash_Data*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[176]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_dma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::status_detection()
</UL>

<P><STRONG><a name="[88]"></a>__cxa_pure_virtual</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.constdata__ZTV9Menu_Base)
</UL>
<P><STRONG><a name="[17f]"></a>arm_fir_f32</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, arm_fir_f32.o(i.arm_fir_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arm_fir_f32 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_pass_filter::execute_filter(float)
</UL>

<P><STRONG><a name="[17c]"></a>arm_fir_init_f32</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, arm_fir_init_f32.o(i.arm_fir_init_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_fir_init_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::voltage_relay(Flash_Data*)
</UL>

<P><STRONG><a name="[a3]"></a>main</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, main_1.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL_user_Init()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Default_Data(Flash_Data*)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::push(OPERATION_BASE*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_MAIN_FUNC()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM6_Init()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TIM1_Init()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_GPIO_Init()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_TSC_Init()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MX_ADC_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[164]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::calculate()
</UL>

<P><STRONG><a name="[7f]"></a>Event_Check&lang;voltage_relay, void(voltage_relay::*)()&rang;::execute_task()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, alarms_events.o(t._ZN11Event_CheckI13voltage_relayMS0_FvvEE12execute_taskEv))
<BR>[Address Reference Count : 1]<UL><LI> alarms_events.o(.constdata__ZTV11Event_CheckI13voltage_relayMS0_FvvEE)
</UL>
<P><STRONG><a name="[60]"></a>Event_Check&lang;voltage_relay, void(voltage_relay::*)()&rang;::~Event_Check()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, alarms_events.o(t._ZN11Event_CheckI13voltage_relayMS0_FvvEED1Ev))
<BR>[Address Reference Count : 2]<UL><LI> alarms_events.o(i.__sti___17_alarms_events_cpp_5ed0bfbf)
<LI> alarms_events.o(.constdata__ZTV11Event_CheckI13voltage_relayMS0_FvvEE)
</UL>
<P><STRONG><a name="[1ed]"></a>Event_Check&lang;voltage_relay, void(voltage_relay::*)()&rang;::~Event_Check__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, alarms_events.o(t._ZN11Event_CheckI13voltage_relayMS0_FvvEED1Ev), UNUSED)

<P><STRONG><a name="[181]"></a>Stack&lang;OPERATION_BASE*&rang;::get()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main_state_machine.o(t._ZN5StackIP14OPERATION_BASEE3getEv))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::run_task()
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_f32
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::calculate()
</UL>

<P><STRONG><a name="[197]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_f32
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::calculate()
</UL>

<P><STRONG><a name="[1ee]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[160]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::calculate()
</UL>

<P><STRONG><a name="[199]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[eb]"></a>[local to stm32f0xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f0xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_dma_c_c25f65ec13DMA_SetConfigEP19__DMA_HandleTypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f0xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[ea]"></a>[local to stm32f0xx_hal_dma_c]::DMA_CalcBaseAndBitshift(__DMA_HandleTypeDef*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_dma_c_c25f65ec23DMA_CalcBaseAndBitshiftEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f0xx_hal_dma_c]::DMA_CalcBaseAndBitshift(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[116]"></a>[local to stm32f0xx_hal_tsc_c]::TSC_extract_groups(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f0xx_hal_tsc.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_tsc_c_c4cd125f18TSC_extract_groupsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f0xx_hal_tsc_c]::TSC_extract_groups(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_Init
</UL>

<P><STRONG><a name="[ed]"></a>[local to stm32f0xx_hal_flash_ex_c]::FLASH_MassErase()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_hal_flash_ex.o(i._ZN46_INTERNAL_24_stm32f0xx_hal_flash_ex_c_6648b60e15FLASH_MassEraseEv))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[f8]"></a>[local to stm32f0xx_hal_cortex_c]::NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f0xx_hal_cortex_c_910ac08716NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e4]"></a>[local to stm32f0xx_hal_adc_c]::ADC_Enable(ADC_HandleTypeDef*)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_adc_c_52ef8f5010ADC_EnableEP17ADC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f0xx_hal_adc_c]::ADC_Enable(ADC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[e8]"></a>[local to stm32f0xx_hal_adc_c]::ADC_Disable(ADC_HandleTypeDef*)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_adc_c_52ef8f5011ADC_DisableEP17ADC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f0xx_hal_adc_c]::ADC_Disable(ADC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>

<P><STRONG><a name="[5d]"></a>[local to stm32f0xx_hal_adc_c]::ADC_DMAError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_adc_c_52ef8f5012ADC_DMAErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f0xx_hal_adc_c]::ADC_DMAError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[5c]"></a>[local to stm32f0xx_hal_adc_c]::ADC_DMAConvCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f0xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_adc_c_52ef8f5015ADC_DMAConvCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f0xx_hal_adc_c]::ADC_DMAConvCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[e7]"></a>[local to stm32f0xx_hal_adc_c]::ADC_ConversionStop(ADC_HandleTypeDef*)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f0xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_adc_c_52ef8f5018ADC_ConversionStopEP17ADC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f0xx_hal_adc_c]::ADC_ConversionStop(ADC_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>

<P><STRONG><a name="[106]"></a>[local to stm32f0xx_hal_tim_c]::TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_tim_c_a9d95b5218TIM_ITRx_SetConfigEP11TIM_TypeDeft))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[104]"></a>[local to stm32f0xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f0xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_tim_c_a9d95b5224TIM_TI1_ConfigInputStageEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f0xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[105]"></a>[local to stm32f0xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f0xx_hal_tim_c_a9d95b5224TIM_TI2_ConfigInputStageEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f0xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[da]"></a>[local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f0xx_hal_flash.o(i._ZN43_INTERNAL_21_stm32f0xx_hal_flash_c_48aa8f3e18FLASH_SetErrorCodeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[f1]"></a>[local to stm32f0xx_hal_flash_c]::FLASH_Program_HalfWord(unsigned, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_hal_flash.o(i._ZN43_INTERNAL_21_stm32f0xx_hal_flash_c_48aa8f3e22FLASH_Program_HalfWordEjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f0xx_hal_flash_c]::FLASH_Program_HalfWord(unsigned, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[8d]"></a>__sti___10_Screen_cpp_scr</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, screen.o(i.__sti___10_Screen_cpp_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___10_Screen_cpp_scr &rArr; Segment::Segment(GPIO_TypeDef*, unsigned short) &rArr; Segment::BSRR_Off()
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Segment::Segment(GPIO_TypeDef*, unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Digit::Digit(GPIO_TypeDef*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> screen.o(.init_array)
</UL>
<P><STRONG><a name="[154]"></a>[local to eeprom_c]::Erase_Page(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, eeprom.o(i._ZN28_INTERNAL_8_eeprom_c_DataVar10Erase_PageEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to eeprom_c]::Erase_Page(unsigned) &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_Format()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[158]"></a>[local to eeprom_c]::page_is_blank(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, eeprom.o(i._ZN28_INTERNAL_8_eeprom_c_DataVar13page_is_blankEj))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
</UL>

<P><STRONG><a name="[13a]"></a>[local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short)</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, eeprom.o(i._ZN28_INTERNAL_8_eeprom_c_DataVar15EE_PageTransferEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short) &rArr; [local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Renew_EEpromData(Flash_Data*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable(unsigned short, unsigned short*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_FindValidPage(unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::Erase_Page(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[12f]"></a>[local to eeprom_c]::EE_FindValidPage(unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, eeprom.o(i._ZN28_INTERNAL_8_eeprom_c_DataVar16EE_FindValidPageEh))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable(unsigned short, unsigned short*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[139]"></a>[local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, eeprom.o(i._ZN28_INTERNAL_8_eeprom_c_DataVar30EE_VerifyPageFullWriteVariableEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to eeprom_c]::EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_FindValidPage(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable(unsigned short, unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::EE_PageTransfer(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[156]"></a>[local to eeprom_c]::EE_Format()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eeprom.o(i._ZN28_INTERNAL_8_eeprom_c_DataVar9EE_FormatEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [local to eeprom_c]::EE_Format() &rArr; [local to eeprom_c]::Erase_Page(unsigned) &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation &rArr; [local to stm32f0xx_hal_flash_c]::FLASH_SetErrorCode()
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to eeprom_c]::Erase_Page(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
</UL>

<P><STRONG><a name="[8e]"></a>__sti___8_eeprom_c_DataVar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eeprom.o(i.__sti___8_eeprom_c_DataVar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __sti___8_eeprom_c_DataVar &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(.init_array)
</UL>
<P><STRONG><a name="[8f]"></a>__sti___15_eeprom_user_cpp_93c2cf2d</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, eeprom_user.o(i.__sti___15_eeprom_user_cpp_93c2cf2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___15_eeprom_user_cpp_93c2cf2d &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Data::Flash_Data(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom_user.o(.init_array)
</UL>
<P><STRONG><a name="[30]"></a>[local to voltage_relay_cpp]::Alarm_Reset()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, voltage_relay.o(i._ZN35_INTERNAL_17_voltage_relay_cpp_vptr11Alarm_ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to voltage_relay_cpp]::Alarm_Reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::pop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> voltage_relay.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>[local to voltage_relay_cpp]::Alarm_Handler()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, voltage_relay.o(i._ZN35_INTERNAL_17_voltage_relay_cpp_vptr13Alarm_HandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to voltage_relay_cpp]::Alarm_Handler()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::pop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> voltage_relay.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>[local to voltage_relay_cpp]::Voltage_Calculation()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, voltage_relay.o(i._ZN35_INTERNAL_17_voltage_relay_cpp_vptr19Voltage_CalculationEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = [local to voltage_relay_cpp]::Voltage_Calculation() &rArr; voltage_acq::calculate() &rArr; voltage_acq::filter_voltage() &rArr; low_pass_filter::execute_filter(float) &rArr; arm_fir_f32 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_acq::calculate()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_Relay_Executor::pop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> voltage_relay.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>__sti___17_voltage_relay_cpp_vptr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, voltage_relay.o(i.__sti___17_voltage_relay_cpp_vptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __sti___17_voltage_relay_cpp_vptr &rArr; voltage_relay::voltage_relay(Flash_Data*) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voltage_relay::voltage_relay(Flash_Data*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> voltage_relay.o(.init_array)
</UL>
<P><STRONG><a name="[91]"></a>__sti___22_main_state_machine_cpp_c044dce6</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main_state_machine.o(i.__sti___22_main_state_machine_cpp_c044dce6))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sti___22_main_state_machine_cpp_c044dce6 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_state_machine.o(.init_array)
</UL>
<P><STRONG><a name="[92]"></a>__sti___17_alarms_events_cpp_5ed0bfbf</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, alarms_events.o(i.__sti___17_alarms_events_cpp_5ed0bfbf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sti___17_alarms_events_cpp_5ed0bfbf &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> alarms_events.o(.init_array)
</UL>
<P><STRONG><a name="[182]"></a>[local to main_c]::MX_ADC_Init()</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, main_1.o(i._ZN27_INTERNAL_6_main_c_484a10ab11MX_ADC_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [local to main_c]::MX_ADC_Init() &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; _Error_Handler &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>[local to main_c]::MX_TSC_Init()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main_1.o(i._ZN27_INTERNAL_6_main_c_484a10ab11MX_TSC_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to main_c]::MX_TSC_Init() &rArr; HAL_TSC_Init &rArr; HAL_TSC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TSC_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>[local to main_c]::MX_GPIO_Init()</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, main_1.o(i._ZN27_INTERNAL_6_main_c_484a10ab12MX_GPIO_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to main_c]::MX_GPIO_Init() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>[local to main_c]::MX_TIM1_Init()</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, main_1.o(i._ZN27_INTERNAL_6_main_c_484a10ab12MX_TIM1_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = [local to main_c]::MX_TIM1_Init() &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>[local to main_c]::MX_TIM6_Init()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main_1.o(i._ZN27_INTERNAL_6_main_c_484a10ab12MX_TIM6_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [local to main_c]::MX_TIM6_Init() &rArr; operator &lang;&lang;(Screen&, const char*) &rArr; __aeabi_memmove &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(Screen&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>__sti___8_menu_cpp_6e0c3973</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, menu.o(i.__sti___8_menu_cpp_6e0c3973))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __sti___8_menu_cpp_6e0c3973 &rArr; Menu_item::Menu_item(const char*, unsigned char, ...) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_item::Menu_item(const char*, unsigned char, ...)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Time::Menu_Time(const char*, Flash_Data&, Menu_Base*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Base::Menu_Base__sub_object(const char*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_flash_rw::Menu_flash_rw(const char*, Flash_Data&, Menu_Base*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.init_array)
</UL>
<P><STRONG><a name="[19a]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[198]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[5b]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[ce]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
